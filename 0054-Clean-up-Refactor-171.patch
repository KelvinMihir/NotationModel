From 5ee69e2d0744a8ecd77658de0f74dccf0569f07f Mon Sep 17 00:00:00 2001
From: bwetherfield <bwetherfield@gmail.com>
Date: Wed, 7 Nov 2018 10:00:18 -0500
Subject: [PATCH 54/66] Clean up / Refactor (#171)

* Remove WeightedGraphProtocol extension

* Place constructors in single WeightedGraphSchemeProtocol extension

* Add weight(from:to:) to WeightedGraphSchemeProtocol

* Rename WeightedDirectedGraphScheme

* Refactor weight(from:to:) into pullback definition

* Remove unneeded init

* Add contains(from:to:) to UnweightedGraphSchemeProtocol

* Add multiplication of different unweighted graph scheme protocols

* Add multiplication functions for WeightedGraphSchemeProtocol

* Add unweighted scheme multiplications to UnweightedGraphSchemeProtocol

* Implement weight scaling of UnweightedGraphSchemeProtocol

* Remove .inits

* Remove more .inits

* Add mask functions
---
 .../Wetherfield/DirectedGraphProtocol.swift   |  4 ++
 .../Wetherfield/FlowNetwork.swift             | 18 +++++-
 .../Wetherfield/GraphScheme.swift             |  4 ++
 .../Wetherfield/GraphSchemeProtocol.swift     |  2 +-
 .../UnweightedGraphSchemeProtocol.swift       | 32 ++++++++++-
 .../Wetherfield/WeightCarrying.swift          |  2 +-
 ...wift => WeightedDirectedGraphScheme.swift} |  6 +-
 .../Wetherfield/WeightedGraphScheme.swift     |  4 ++
 .../WeightedGraphSchemeProtocol.swift         | 55 ++++++++++++++++---
 9 files changed, 109 insertions(+), 18 deletions(-)
 rename Sources/SpelledPitch/PitchSpeller/Wetherfield/{WeightedDirectedGraphSchema.swift => WeightedDirectedGraphScheme.swift} (72%)

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/DirectedGraphProtocol.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/DirectedGraphProtocol.swift
index 5ada6c7..26c6784 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/DirectedGraphProtocol.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/DirectedGraphProtocol.swift
@@ -16,4 +16,8 @@ struct DirectedGraphScheme <Node>: DirectedGraphSchemeProtocol, UnweightedGraphS
     init (_ contains: @escaping (Edge) -> Bool) {
         self.contains = contains
     }
+    
+    func contains(from start: Node, to end: Node) -> Bool {
+        return contains(Edge(start, end))
+    }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
index a90e690..64267bc 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
@@ -51,7 +51,7 @@ extension FlowNetwork {
             }
         }
     }
-    
+
     mutating func mask <G: GraphProtocol> (_ adjacencyCarrying: AdjacencyCarrying<G>)
         where Node == G.Node
     {
@@ -60,11 +60,23 @@ extension FlowNetwork {
         }
     }
     
-    mutating func mask (_ adjacencyScheme: GraphScheme<Node>) {
-        for edge in edges where !adjacencyScheme.contains(GraphScheme<Node>.Edge(edge.a, edge.b)) {
+    mutating func mask <Scheme: UnweightedGraphSchemeProtocol> (_ adjacencyScheme: Scheme) where
+        Scheme.Node == Node
+    {
+        for edge in edges where !adjacencyScheme.contains(from: edge.a, to: edge.b) {
             remove(edge)
         }
     }
+    
+    mutating func mask <Scheme: WeightedGraphSchemeProtocol> (_ weightScheme: Scheme) where
+        Scheme.Node == Node,
+        Scheme.Weight == Weight
+    {
+        for edge in edges {
+            guard let scalar = weightScheme.weight(from: edge.a, to: edge.b) else { remove(edge); return }
+            updateEdge(edge) { $0 * scalar }
+        }
+    }
 }
 
 extension FlowNetwork {
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphScheme.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphScheme.swift
index 88a1f8b..0601f22 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphScheme.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphScheme.swift
@@ -16,4 +16,8 @@ struct GraphScheme <Node>: UndirectedGraphSchemeProtocol, UnweightedGraphSchemeP
     init (_ contains: @escaping (Edge) -> Bool) {
         self.contains = contains
     }
+    
+    func contains(from start: Node, to end: Node) -> Bool {
+        return contains(Edge(start, end))
+    }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphSchemeProtocol.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphSchemeProtocol.swift
index 91d2899..45b0c3f 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphSchemeProtocol.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/GraphSchemeProtocol.swift
@@ -18,6 +18,6 @@ extension GraphProtocol {
         G.Edge == Edge,
         G.Node == Node
     {
-        return G.init(self.contains)
+        return G(self.contains)
     }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/UnweightedGraphSchemeProtocol.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/UnweightedGraphSchemeProtocol.swift
index 1aae3f1..97cf5c6 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/UnweightedGraphSchemeProtocol.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/UnweightedGraphSchemeProtocol.swift
@@ -11,22 +11,48 @@ public protocol UnweightedGraphSchemeProtocol: GraphSchemeProtocol {
     var contains: (Edge) -> Bool { get }
     
     init (_ contains: @escaping (Edge) -> Bool)
+    
+    func contains (from start: Node, to end: Node) -> Bool
 }
 
 extension UnweightedGraphSchemeProtocol {
     @inlinable
     func pullback <H> (_ f: @escaping (H.Node) -> Node) -> H where H: UnweightedGraphSchemeProtocol {
-        return H.init { self.contains(Edge(f($0.a),f($0.b))) }
+        return H { self.contains(Edge(f($0.a),f($0.b))) }
     }
 }
 
 extension UnweightedGraphSchemeProtocol where Self: UndirectedGraphSchemeProtocol {
     
     static func * (lhs: Self, rhs: Self) -> Self {
-        return Self.init { edge in lhs.contains(edge) && rhs.contains(edge) }
+        return Self { edge in lhs.contains(edge) && rhs.contains(edge) }
     }
     
     static func + (lhs: Self, rhs: Self) -> Self {
-        return Self.init { edge in lhs.contains(edge) || rhs.contains(edge) }
+        return Self { edge in lhs.contains(edge) || rhs.contains(edge) }
+    }
+}
+
+extension UnweightedGraphSchemeProtocol where Self: DirectedGraphSchemeProtocol {
+    
+    static func * <Scheme> (lhs: Self, rhs: Scheme) -> Self where
+        Scheme: UnweightedGraphSchemeProtocol,
+        Scheme.Node == Node
+    {
+        return Self { edge in lhs.contains(edge) && rhs.contains(from: edge.a, to: edge.b) }
+    }
+}
+
+extension UnweightedGraphSchemeProtocol {
+    
+    static func * <Weight, Scheme> (lhs: Weight, rhs: Self) -> Scheme where
+        Scheme: WeightedGraphSchemeProtocol,
+        Scheme.Weight == Weight,
+        Scheme.Node == Node,
+        Scheme.Edge == Edge
+    {
+        return Scheme { edge in
+            return rhs.contains(edge) ? lhs : nil
+        }
     }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
index 8a11396..62934ad 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
@@ -80,7 +80,7 @@ extension WeightCarrying {
         Scheme.Node == G.Node,
         Scheme.Weight == G.Weight
     {
-        return Scheme.init(weight)
+        return Scheme(weight)
     }
 }
 
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphSchema.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphScheme.swift
similarity index 72%
rename from Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphSchema.swift
rename to Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphScheme.swift
index 854f9c8..ab0f1e1 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphSchema.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedDirectedGraphScheme.swift
@@ -1,5 +1,5 @@
 //
-//  WeightedDirectedGraphSchema.swift
+//  WeightedDirectedGraphScheme.swift
 //  SpelledPitch
 //
 //  Created by Benjamin Wetherfield on 03/11/2018.
@@ -16,4 +16,8 @@ struct WeightedDirectedGraphScheme <Node,Weight>: DirectedGraphSchemeProtocol, W
     init (_ weight: @escaping (Edge) -> Weight?) {
         self.weight = weight
     }
+    
+    func weight(from start: Node, to end: Node) -> Weight? {
+        return weight(Edge(start, end))
+    }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphScheme.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphScheme.swift
index 3f74b7e..e166755 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphScheme.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphScheme.swift
@@ -16,4 +16,8 @@ struct WeightedGraphScheme <Node,Weight>: UndirectedGraphSchemeProtocol, Weighte
     init (_ weight: @escaping (Edge) -> Weight?) {
         self.weight = weight
     }
+    
+    func weight(from start: Node, to end: Node) -> Weight? {
+        return weight(Edge(start, end))
+    }
 }
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
index dce5b8b..7cb7889 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
@@ -13,6 +13,8 @@ public protocol WeightedGraphSchemeProtocol: GraphSchemeProtocol {
     var weight: (Edge) -> Weight? { get }
     
     init (_ weight: @escaping (Edge) -> Weight?)
+    
+    func weight (from start: Node, to end: Node) -> Weight?
 }
 
 extension WeightedGraphSchemeProtocol {
@@ -21,25 +23,60 @@ extension WeightedGraphSchemeProtocol {
         H: WeightedGraphSchemeProtocol,
         H.Weight == Weight
     {
-        return H.init { self.weight(Edge(f($0.a),f($0.b))) }
+        return H { self.weight(from: f($0.a), to: f($0.b)) }
     }
-}
 
-extension WeightedGraphSchemeProtocol {
     @inlinable
     func unweighted <H> () -> H where
         H: UnweightedGraphSchemeProtocol,
         H.Edge == Edge
     {
-        return H.init { self.weight($0) != nil }
+        return H { self.weight($0) != nil }
+    }
+}
+
+extension WeightedGraphSchemeProtocol where Self: UndirectedGraphSchemeProtocol, Weight: Numeric {
+    
+    static func * (lhs: Self, rhs: Self) -> Self {
+        return Self { edge in
+            guard let lweight = lhs.weight(edge), let rweight = rhs.weight(edge) else { return nil }
+            return lweight * rweight
+        }
     }
 }
 
-extension WeightedGraphProtocol {
-    func weightScheme <G> (_ f: @escaping (G.Node) -> Node) -> WeightCarrying<G> where
-        G: WeightedGraphProtocol,
-        G.Weight == Weight
+extension WeightedGraphSchemeProtocol where Self: DirectedGraphSchemeProtocol, Weight: Numeric {
+    
+    static func * <Scheme> (lhs: Self, rhs: Scheme) -> Self where
+    Scheme: WeightedGraphSchemeProtocol,
+    Scheme.Node == Node,
+    Scheme.Weight == Weight
+    {
+        return Self { edge in
+            guard
+                let lweight = lhs.weight(edge),
+                let rweight = rhs.weight(from: edge.a, to: edge.b) else { return nil }
+            return lweight * rweight
+        }
+    }
+    
+    static func * <Scheme> (lhs: Self, rhs: Scheme) -> Self where
+        Scheme: UnweightedGraphSchemeProtocol,
+        Scheme.Node == Node
+    {
+        return Self { edge in
+            if let lweight = lhs.weight(edge) {
+                return rhs.contains(from: edge.a, to: edge.b) ? lweight : nil
+            } else {
+                return nil
+            }
+        }
+    }
+    
+    static func * <Scheme> (lhs: Scheme, rhs: Self) -> Self where
+        Scheme: UnweightedGraphSchemeProtocol,
+        Scheme.Node == Node
     {
-        return WeightCarrying.build(from: self).pullback(f)
+        return rhs * lhs
     }
 }
-- 
2.17.2 (Apple Git-113)

