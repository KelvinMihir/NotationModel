From 8784c33d7dc538f5bc104e8fbeebe719e2201187 Mon Sep 17 00:00:00 2001
From: James Bean <jbean46@gmail.com>
Date: Wed, 14 Nov 2018 14:51:09 -0500
Subject: [PATCH 57/66] Harmonize with Structure @ 0.19.4 (#195)

---
 .../Wetherfield/AdjacencyCarrying.swift       |  58 ---------
 .../Wetherfield/FlowNetwork.swift             |  19 ---
 .../Wetherfield/WeightCarrying.swift          | 118 ------------------
 .../Wetherfield/WeightLabel.swift             |  76 +++++++++++
 .../WeightedGraphSchemeProtocol.swift         |   6 +-
 .../Wetherfield/Wetherfield.swift             |   4 +-
 6 files changed, 81 insertions(+), 200 deletions(-)
 delete mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
 delete mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightLabel.swift

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
deleted file mode 100644
index d0a56c8..0000000
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
+++ /dev/null
@@ -1,58 +0,0 @@
-//
-//  AdjacencyCarrying.swift
-//  SpelledPitch
-//
-//  Created by Benjamin Wetherfield on 30/10/2018.
-//
-
-import DataStructures
-
-public struct AdjacencyCarrying <G: GraphProtocol> {
-    let contains: (G.Edge) -> Bool
-    
-    private init (contains: @escaping (G.Edge) -> Bool) {
-        self.contains = contains
-    }
-    
-    func contains (from start: G.Node, to end: G.Node) -> Bool {
-        return contains(G.Edge(start, end))
-    }
-    
-    func pullback <H: GraphProtocol> (_ f: @escaping (H.Node) -> G.Node) -> AdjacencyCarrying<H> {
-        return AdjacencyCarrying<H> { e in self.contains(G.Edge(f(e.a), f(e.b))) }
-    }
-    
-    static func build (from g: G) -> AdjacencyCarrying {
-        return AdjacencyCarrying(contains: g.contains)
-    }
-    
-    static func build (_ contains: @escaping (G.Edge) -> Bool) -> AdjacencyCarrying {
-        return AdjacencyCarrying(contains: contains)
-    }
-}
-
-extension AdjacencyCarrying {
-    
-    static func * <H> (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying<H>) -> AdjacencyCarrying
-        where
-        H: UndirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return AdjacencyCarrying { e in lhs.contains(e) && rhs.contains(H.Edge(e.a, e.b)) }
-    }
-    
-    static func + (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying) -> AdjacencyCarrying {
-        return AdjacencyCarrying { e in lhs.contains(e) || rhs.contains(e) }
-    }
-}
-
-extension AdjacencyCarrying where G: DirectedGraphProtocol {
-    
-    static func * <H> (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying<H>) -> AdjacencyCarrying
-        where
-        H: DirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return AdjacencyCarrying { e in lhs.contains(e) && rhs.contains(H.Edge(e.a, e.b)) }
-    }
-}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
index d94f7d2..c15753a 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
@@ -40,25 +40,6 @@ extension FlowNetwork {
 }
 
 extension FlowNetwork {
-    mutating func mask <G: WeightedGraphProtocol> (_ weightCarrying: WeightCarrying<G>)
-        where Node == G.Node, Weight == G.Weight
-    {
-        for edge in weights.keys {
-            if let maskWeight = weightCarrying.weight(from: edge.a, to: edge.b) {
-                updateEdge(edge) { $0 * maskWeight }
-            } else {
-                remove(edge)
-            }
-        }
-    }
-
-    mutating func mask <G: GraphProtocol> (_ adjacencyCarrying: AdjacencyCarrying<G>)
-        where Node == G.Node
-    {
-        for edge in edges {
-            if !adjacencyCarrying.contains(from: edge.a, to: edge.b) { remove(edge) }
-        }
-    }
     
     mutating func mask <Scheme: UnweightedGraphSchemeProtocol> (_ adjacencyScheme: Scheme) where
         Scheme.Node == Node
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
deleted file mode 100644
index 62934ad..0000000
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
+++ /dev/null
@@ -1,118 +0,0 @@
-//
-//  WeightCarrying.swift
-//  SpelledPitch
-//
-//  Created by Benjamin Wetherfield on 30/10/2018.
-//
-
-import DataStructures
-
-public struct WeightCarrying<G: WeightedGraphProtocol> {
-    let weight: (G.Edge) -> G.Weight?
-    
-    private init (weight: @escaping (G.Edge) -> G.Weight?) {
-        self.weight = weight
-    }
-    
-    func weight (from start: G.Node, to end: G.Node) -> G.Weight? {
-        return weight(G.Edge(start, end))
-    }
-
-    func pullback <H: WeightedGraphProtocol> (_ f: @escaping (H.Node) -> G.Node) -> WeightCarrying<H>
-        where H.Weight == G.Weight
-    {
-        return WeightCarrying<H> { e in self.weight(G.Edge(f(e.a), f(e.b))) }
-    }
-    
-    static func build (from g: G) -> WeightCarrying {
-        return WeightCarrying(weight: g.weight)
-    }
-    
-    static func build (_ weight: @escaping (G.Edge) -> G.Weight?) -> WeightCarrying {
-        return WeightCarrying(weight: weight)
-    }
-}
-
-extension WeightCarrying {
-    
-    static func * <H> (lhs: WeightCarrying, rhs: WeightCarrying<H>) -> WeightCarrying
-        where
-        H: UndirectedGraphProtocol,
-        H.Node == G.Node,
-        H.Weight == G.Weight
-    {
-        return WeightCarrying { e in
-            guard let lweight = lhs.weight(e), let rweight = rhs.weight(H.Edge(e.a, e.b))
-                else { return nil }
-            return lweight * rweight
-        }
-    }
-    
-    static func * <H> (lhs: WeightCarrying, rhs: AdjacencyCarrying<H>) -> WeightCarrying
-        where
-        H: UndirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return WeightCarrying { e in rhs.contains(H.Edge(e.a,e.b)) ? lhs.weight(e) : nil }
-    }
-    
-    static func * <H> (lhs: AdjacencyCarrying<H>, rhs: WeightCarrying) -> WeightCarrying
-        where
-        H: UndirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return WeightCarrying { e in lhs.contains(H.Edge(e.a,e.b)) ? rhs.weight(e) : nil }
-    }
-    
-    static func + (lhs: WeightCarrying, rhs: WeightCarrying) -> WeightCarrying {
-        return WeightCarrying { e in
-            guard let lweight = lhs.weight(e) else { return rhs.weight(e) }
-            guard let rweight = rhs.weight(e) else { return lhs.weight(e) }
-            return lweight + rweight
-        }
-    }
-}
-
-extension WeightCarrying {
-    
-    func weightedScheme <Scheme: WeightedGraphSchemeProtocol> () -> Scheme where
-        Scheme.Edge == G.Edge,
-        Scheme.Node == G.Node,
-        Scheme.Weight == G.Weight
-    {
-        return Scheme(weight)
-    }
-}
-
-extension WeightCarrying where G: DirectedGraphProtocol {
-    
-    static func * <H> (lhs: WeightCarrying, rhs: WeightCarrying<H>) -> WeightCarrying
-        where
-        H: DirectedGraphProtocol,
-        H.Node == G.Node,
-        H.Weight == G.Weight
-    {
-        return WeightCarrying { e in
-            guard let lweight = lhs.weight(e), let rweight = rhs.weight(H.Edge(e.a, e.b))
-                else { return nil }
-            return lweight * rweight
-        }
-    }
-    
-    static func * <H> (lhs: WeightCarrying, rhs: AdjacencyCarrying<H>) -> WeightCarrying
-        where
-        H: DirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return WeightCarrying { e in rhs.contains(H.Edge(e.a,e.b)) ? lhs.weight(e) : nil }
-    }
-    
-    static func * <H> (lhs: AdjacencyCarrying<H>, rhs: WeightCarrying) -> WeightCarrying
-        where
-        H: DirectedGraphProtocol,
-        H.Node == G.Node
-    {
-        return WeightCarrying { e in lhs.contains(H.Edge(e.a,e.b)) ? rhs.weight(e) : nil }
-    }
-}
-
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightLabel.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightLabel.swift
new file mode 100644
index 0000000..311f6ab
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightLabel.swift
@@ -0,0 +1,76 @@
+//
+//  WeightLabel.swift
+//  SpelledPitch
+//
+//  Created by Benjamin Wetherfield on 09/11/2018.
+//
+
+import Algebra
+import DataStructures
+import Pitch
+
+struct WeightLabel <Edge: SymmetricPair & Hashable>: AdditiveGroup {
+
+    var inverse: WeightLabel<Edge> {
+        return -self
+    }
+
+    init (edge: Edge? = nil, plus plusColumn: Set<Edge> = [], minus minusColumn: Set<Edge> = []) {
+        self.edge = edge
+        self.plusColumn = plusColumn
+        self.minusColumn = minusColumn
+    }
+    
+    static var zero: WeightLabel {
+        return .init()
+    }
+    
+    static func build(_ edge: Edge) -> WeightLabel {
+        return .init(edge: edge, plus: [edge])
+    }
+    
+    static prefix func - (_ invert: WeightLabel) -> WeightLabel {
+        return .init(edge: invert.edge, plus: invert.minusColumn, minus: invert.plusColumn)
+    }
+
+    static func + (lhs: WeightLabel, rhs: WeightLabel) -> WeightLabel {
+        return
+            .init(
+                edge: lhs.edge,
+                plus: lhs.plusColumn.union(rhs.plusColumn)
+                    .subtracting(lhs.minusColumn.union(rhs.minusColumn)),
+                minus: lhs.minusColumn.union(rhs.minusColumn)
+                    .subtracting(lhs.plusColumn.intersection(rhs.plusColumn))
+        )
+    }
+    
+    static func - (lhs: WeightLabel, rhs: WeightLabel) -> WeightLabel {
+        return lhs + -rhs
+    }
+    
+    let edge: Edge?
+    private let plusColumn: Set<Edge>
+    private let minusColumn: Set<Edge>
+}
+
+extension WeightLabel: Equatable where Edge: Equatable {
+    
+    static func == (lhs: WeightLabel, rhs: WeightLabel) -> Bool {
+        return lhs.plusColumn.subtracting(lhs.minusColumn) == rhs.plusColumn.subtracting(rhs.minusColumn)
+    }
+}
+
+extension WeightLabel: Comparable where Edge.A: Assigned {
+    static func < (lhs: WeightLabel<Edge>, rhs: WeightLabel<Edge>) -> Bool {
+        return lhs.edge.flatMap { left in
+            rhs.edge.map { right in
+                left.a.assignment < left.b.assignment &&
+                !(right.a.assignment < right.b.assignment)
+            }
+        } ?? false
+    }
+}
+
+protocol Assigned {
+    var assignment: Tendency { get }
+}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
index 58de7d7..9af511d 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightedGraphSchemeProtocol.swift
@@ -59,9 +59,9 @@ extension WeightedGraphSchemeProtocol where Self: UndirectedGraphSchemeProtocol,
 extension WeightedGraphSchemeProtocol where Self: DirectedGraphSchemeProtocol, Weight: Numeric {
     
     static func * <Scheme> (lhs: Self, rhs: Scheme) -> Self where
-    Scheme: WeightedGraphSchemeProtocol,
-    Scheme.Node == Node,
-    Scheme.Weight == Weight
+        Scheme: WeightedGraphSchemeProtocol,
+        Scheme.Node == Node,
+        Scheme.Weight == Weight
     {
         return Self { edge in
             lhs.weight(edge).flatMap { lweight in
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
index 616aa5e..c7af8ce 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
@@ -128,7 +128,7 @@ extension PitchSpeller {
             Cross(pitches[cross.a]!.class, cross.b)
         }
         let pitchClassTendencyGetter = bind(internalPitchClassTendency)
-        
+
         let specificSourceEdges: WeightedDirectedGraphScheme<PitchSpellingNode.Index, Double> =
             sourceEdges.pullback(pitchClassTendencyGetter)
         let specificInternalEdges: WeightedDirectedGraphScheme<PitchSpellingNode.Index, Double> =
@@ -321,7 +321,7 @@ extension FlowNetwork where Node == PitchSpellingNode.Index, Weight == Double {
     }
 }
 
-extension WeightedDirectedGraph {
+extension WeightedDirectedGraph where Weight: ExpressibleByIntegerLiteral {
     /// Create a `DirectedGraph` which is hooked up as necessary for the Wetherfield pitch-spelling process.
     init(source: Node, sink: Node, internalNodes: [Node]) {
         self.init(Set([source,sink] + internalNodes))
-- 
2.17.2 (Apple Git-113)

