From 0808f904de7eb1aa2c0d655ef0156cc64bf18aa3 Mon Sep 17 00:00:00 2001
From: James <jbean46@gmail.com>
Date: Mon, 5 Nov 2018 21:54:21 -0500
Subject: [PATCH 47/66] Remove pitchNodes property, refactor
 internalNodes(pitches:) out to free func

---
 .../Wetherfield/Wetherfield.swift             | 22 +++++++------------
 1 file changed, 8 insertions(+), 14 deletions(-)

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
index d20304c..c55e43f 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
@@ -36,10 +36,6 @@ struct PitchSpeller {
     /// The unspelled `Pitch` values to be spelled.
     let pitch: (PitchSpellingNode.Index) -> Pitch?
 
-    /// The nodes within the `FlowNetwork`. The values are the encodings of the indices of `Pitch`
-    /// values in `pitches.
-    let pitchNodes: [PitchSpellingNode.Index]
-
     /// The `FlowNetwork` which will be manipulated in order to spell the unspelled `pitches`.
     var flowNetwork: FlowNetwork<PitchSpellingNode.Index,Double>
     
@@ -97,11 +93,11 @@ extension PitchSpeller {
             }
         }
         self.getPitchClass = getPitchClass
-        self.pitchNodes = PitchSpeller.internalNodes(pitches: pitches)
+//        self.pitchNodes = PitchSpeller.internalNodes(pitches: pitches)
         self.flowNetwork = FlowNetwork(
             source: .source,
             sink: .sink,
-            internalNodes: pitchNodes
+            internalNodes: internalNodes(pitches: pitches)
         )
         let specificToEight = GraphScheme<Cross<Pitch.Class, Tendency>>(eightLookup.contains)
         let connectToEight: GraphScheme<PitchSpellingNode.Index> = specificToEight.pullback { flowNode in
@@ -133,14 +129,6 @@ extension PitchSpeller {
         }
         return contains ? pitchClassAdjacencyScheme : pitchClassNonAdjacencyScheme
     }
-
-
-
-    /// - Returns: An array of nodes, each representing the index of the unassigned node in
-    /// `pitchNodes`.
-    private static func internalNodes(pitches: [Int: Pitch]) -> [PitchSpellingNode.Index] {
-        return pitches.keys.flatMap { offset in [.down,.up].map { index in node(offset, index) } }
-    }
 }
 
 extension PitchSpeller {
@@ -197,6 +185,12 @@ extension PitchSpeller {
     }
 }
 
+/// - Returns: An array of nodes, each representing the index of the unassigned node in
+/// `pitchNodes`.
+private func internalNodes(pitches: [Int: Pitch]) -> [PitchSpellingNode.Index] {
+    return pitches.keys.flatMap { offset in [.down,.up].map { index in node(offset, index) } }
+}
+
 /// - Returns: The value of a node at the given offset (index of a `Pitch` within `pitches`),
 /// and an index (either `0` or `1`, which of the two nodes in the `FlowNetwork` that represent
 /// the given `Pitch`.)
-- 
2.17.2 (Apple Git-113)

