From 5c463f0cd21c2d325a27e688d5776be125b40ada Mon Sep 17 00:00:00 2001
From: bwetherfield <bwetherfield@gmail.com>
Date: Fri, 2 Nov 2018 19:51:59 -0400
Subject: [PATCH 30/66] Carrying witnesses (#145)

---
 .../Wetherfield/AdjacencyCarrying.swift       |  54 +++++++++
 .../Wetherfield/FlowNetwork.swift             |  14 +++
 .../PitchSpeller/Wetherfield/PullBack.swift   |  22 ----
 .../Wetherfield/WeightCarrying.swift          | 103 ++++++++++++++++++
 4 files changed, 171 insertions(+), 22 deletions(-)
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
 delete mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
new file mode 100644
index 0000000..51c3d09
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/AdjacencyCarrying.swift
@@ -0,0 +1,54 @@
+//
+//  AdjacencyCarrying.swift
+//  SpelledPitch
+//
+//  Created by Benjamin Wetherfield on 30/10/2018.
+//
+
+import DataStructures
+
+struct AdjacencyCarrying <G: GraphProtocol> {
+    let contains: (G.Edge) -> Bool
+    
+    private init (contains: @escaping (G.Edge) -> Bool) {
+        self.contains = contains
+    }
+    
+    func contains (from start: G.Node, to end: G.Node) -> Bool {
+        return contains(G.Edge(start, end))
+    }
+    
+    func pullback <H: GraphProtocol> (_ f: @escaping (H.Node) -> G.Node) -> AdjacencyCarrying<H> {
+        return AdjacencyCarrying<H> { e in self.contains(G.Edge(f(e.a), f(e.b))) }
+    }
+    
+    static func build (from g: G) -> AdjacencyCarrying {
+        return AdjacencyCarrying(contains: g.contains)
+    }
+}
+
+extension AdjacencyCarrying {
+    
+    static func * <H> (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying<H>) -> AdjacencyCarrying
+        where
+        H: UndirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return AdjacencyCarrying { e in lhs.contains(e) && rhs.contains(H.Edge(e.a, e.b)) }
+    }
+    
+    static func + (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying) -> AdjacencyCarrying {
+        return AdjacencyCarrying { e in lhs.contains(e) || rhs.contains(e) }
+    }
+}
+
+extension AdjacencyCarrying where G: DirectedGraphProtocol {
+    
+    static func * <H> (lhs: AdjacencyCarrying, rhs: AdjacencyCarrying<H>) -> AdjacencyCarrying
+        where
+        H: DirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return AdjacencyCarrying { e in lhs.contains(e) && rhs.contains(H.Edge(e.a, e.b)) }
+    }
+}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
index 21d83c1..66ff95f 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/FlowNetwork.swift
@@ -39,6 +39,20 @@ extension FlowNetwork {
     }
 }
 
+extension FlowNetwork {
+    mutating func mask <G: WeightedGraphProtocol> (_ weightCarrying: WeightCarrying<G>)
+        where Node == G.Node, Weight == G.Weight
+    {
+        for edge in weights.keys {
+            if let maskWeight = weightCarrying.weight(from: edge.a, to: edge.b) {
+                updateEdge(edge) { $0 * maskWeight }
+            } else {
+                remove(edge)
+            }
+        }
+    }
+}
+
 extension FlowNetwork {
 
     // MARK: - Instance Methods
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
deleted file mode 100644
index 8742ab6..0000000
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
+++ /dev/null
@@ -1,22 +0,0 @@
-//
-//  PullBack.swift
-//  SpelledPitch
-//
-//  Created by James Bean on 10/24/18.
-//
-
-import DataStructures
-
-struct PullBack <A,B,C,P,Q> where
-    P: SymmetricPair & Hashable,
-    Q: SymmetricPair & Hashable,
-    P.A == A,
-    Q.B == B
-{
-    let map: (Q) -> C?
-    let lensOnIndex: Getter<A, B>
-
-    func retrieve(for p: P) -> C {
-        return map(Q(lensOnIndex.view(p.a), lensOnIndex.view(p.b)))!
-    }
-}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
new file mode 100644
index 0000000..0a935e5
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/WeightCarrying.swift
@@ -0,0 +1,103 @@
+//
+//  WeightCarrying.swift
+//  SpelledPitch
+//
+//  Created by Benjamin Wetherfield on 30/10/2018.
+//
+
+import DataStructures
+
+struct WeightCarrying<G: WeightedGraphProtocol> {
+    let weight: (G.Edge) -> G.Weight?
+    
+    private init (weight: @escaping (G.Edge) -> G.Weight?) {
+        self.weight = weight
+    }
+    
+    func weight (from start: G.Node, to end: G.Node) -> G.Weight? {
+        return weight(G.Edge(start, end))
+		}
+
+    func pullback <H: WeightedGraphProtocol> (_ f: @escaping (H.Node) -> G.Node) -> WeightCarrying<H>
+        where H.Weight == G.Weight
+    {
+        return WeightCarrying<H> { e in self.weight(G.Edge(f(e.a), f(e.b))) }
+    }
+    
+    static func build (from g: G) -> WeightCarrying {
+        return WeightCarrying(weight: g.weight)
+    }
+}
+
+extension WeightCarrying {
+    
+    static func * <H> (lhs: WeightCarrying, rhs: WeightCarrying<H>) -> WeightCarrying
+        where
+        H: UndirectedGraphProtocol,
+        H.Node == G.Node,
+        H.Weight == G.Weight
+    {
+        return WeightCarrying { e in
+            guard let lweight = lhs.weight(e), let rweight = rhs.weight(H.Edge(e.a, e.b))
+                else { return nil }
+            return lweight * rweight
+        }
+    }
+    
+    static func * <H> (lhs: WeightCarrying, rhs: AdjacencyCarrying<H>) -> WeightCarrying
+        where
+        H: UndirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return WeightCarrying { e in rhs.contains(H.Edge(e.a,e.b)) ? lhs.weight(e) : nil }
+    }
+    
+    static func * <H> (lhs: AdjacencyCarrying<H>, rhs: WeightCarrying) -> WeightCarrying
+        where
+        H: UndirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return WeightCarrying { e in lhs.contains(H.Edge(e.a,e.b)) ? rhs.weight(e) : nil }
+    }
+    
+    static func + (lhs: WeightCarrying, rhs: WeightCarrying) -> WeightCarrying {
+        return WeightCarrying { e in
+            guard let lweight = lhs.weight(e) else { return rhs.weight(e) }
+            guard let rweight = rhs.weight(e) else { return lhs.weight(e) }
+            return lweight + rweight
+        }
+    }
+}
+
+extension WeightCarrying where G: DirectedGraphProtocol {
+    
+    static func * <H> (lhs: WeightCarrying, rhs: WeightCarrying<H>) -> WeightCarrying
+        where
+        H: DirectedGraphProtocol,
+        H.Node == G.Node,
+        H.Weight == G.Weight
+    {
+        return WeightCarrying { e in
+            guard let lweight = lhs.weight(e), let rweight = rhs.weight(H.Edge(e.a, e.b))
+                else { return nil }
+            return lweight * rweight
+        }
+    }
+    
+    static func * <H> (lhs: WeightCarrying, rhs: AdjacencyCarrying<H>) -> WeightCarrying
+        where
+        H: DirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return WeightCarrying { e in rhs.contains(H.Edge(e.a,e.b)) ? lhs.weight(e) : nil }
+    }
+    
+    static func * <H> (lhs: AdjacencyCarrying<H>, rhs: WeightCarrying) -> WeightCarrying
+        where
+        H: DirectedGraphProtocol,
+        H.Node == G.Node
+    {
+        return WeightCarrying { e in lhs.contains(H.Edge(e.a,e.b)) ? rhs.weight(e) : nil }
+    }
+}
+
-- 
2.17.2 (Apple Git-113)

