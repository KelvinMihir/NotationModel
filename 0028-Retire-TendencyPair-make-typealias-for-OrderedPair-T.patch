From 457aad5b40179ecc0aeb40e9e088aa2c2eefc5e4 Mon Sep 17 00:00:00 2001
From: bwetherfield <bwetherfield@gmail.com>
Date: Sat, 27 Oct 2018 14:29:58 -0400
Subject: [PATCH 28/66] Retire TendencyPair, make typealias for
 OrderedPair<Tendency> (#139) (#144)

---
 .../PitchSpeller/Wetherfield/Tendency.swift   | 21 +++----------------
 .../Wetherfield/Wetherfield.swift             |  2 +-
 2 files changed, 4 insertions(+), 19 deletions(-)

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
index 41f64b0..f49b3d0 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
@@ -5,8 +5,11 @@
 //  Created by James Bean on 5/22/18.
 //
 
+import DataStructures
 import Pitch
 
+typealias TendencyPair = OrderedPair<Tendency>
+
 /// One of two values encoded in a Wetherfield `FlowNetwork`. Each provides a tendency `up`, or
 /// `down` for the purposes of spelling an unspelled pitch in a given musical context.
 enum Tendency: Int {
@@ -20,24 +23,6 @@ extension Tendency: Comparable {
     }
 }
 
-/// A pair of `Tendency` values. Wrapped up here for the purposes of `Equatable` and `Hashable`
-/// synthesizing.
-struct TendencyPair: Hashable {
-
-    let up: Tendency
-    let down: Tendency
-
-    init(_ up: Tendency, _ down: Tendency) {
-        self.up = up
-        self.down = down
-    }
-
-    init(_ tuple: (Tendency, Tendency)) {
-        self.up = tuple.0
-        self.down = tuple.1
-    }
-}
-
 extension Pitch.Spelling {
 
     /// Creates a `Pitch.Spelling` value with the given `pitchClass` and the given `tendencies`,
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
index 0907eb0..55116e3 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
@@ -108,7 +108,7 @@ struct PitchSpeller {
 
     private func spellPitch(_ up: AssignedNode, _ down: AssignedNode) -> SpelledPitch {
         let pitch = self.pitch(node: up.index)
-        let tendencies = TendencyPair((up.assignment, down.assignment))
+        let tendencies = TendencyPair(up.assignment, down.assignment)
         let spelling = Pitch.Spelling(pitchClass: pitch.class, tendencies: tendencies)!
         return try! pitch.spelled(with: spelling)
     }
-- 
2.17.2 (Apple Git-113)

