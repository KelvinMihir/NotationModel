From 05e53325ef1d3c2bee5e2a398779f7f8c2220d78 Mon Sep 17 00:00:00 2001
From: James <jbean46@gmail.com>
Date: Fri, 21 Sep 2018 16:35:09 -0400
Subject: [PATCH 07/66] Move Graph computed properties and instance methods
 into extensions

---
 .../Wetherfield/Data Structures/Graph.swift   | 167 +++++++++---------
 1 file changed, 87 insertions(+), 80 deletions(-)

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Data Structures/Graph.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Data Structures/Graph.swift
index f37d43e..16d1606 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Data Structures/Graph.swift	
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Data Structures/Graph.swift	
@@ -33,30 +33,102 @@ enum WithoutWeights: Unweighted {
 struct Graph <Weight: Weightedness, Pair: SymmetricPair & Directedness & Hashable>
     where Pair.A: Hashable
 {
-
     // MARK: - Instance Properties
      
     var nodes: Set<Node>
     var adjacents: [Pair: Weight]
-    
+}
+
+extension Graph {
+
+    // MARK: - Type Aliases
+
+    typealias Node = Pair.A
+}
+
+extension Graph {
+
+    // MARK: - Nested Types
+
+    struct Edge {
+
+        // MARK: - Instance Properties
+
+        let nodes: Pair
+        let weight: Weight
+
+        // MARK: - Initializers
+
+        init (_ a: Graph.Node, _ b: Graph.Node, withWeight weight: Weight) {
+            self.nodes = Pair(a, b)
+            self.weight = weight
+        }
+
+        init (_ nodes: Pair, withWeight weight: Weight) {
+            self.nodes = nodes
+            self.weight = weight
+        }
+    }
+
+    struct Path {
+
+        // MARK: - Instance Properties
+
+        let nodes: [Node]
+        let weights: [Pair: Weight]
+
+        // MARK: - Initializers
+
+        init (_ nodes: [Node], _ weights: [Pair: Weight]) {
+            self.nodes = nodes
+            self.weights = weights
+        }
+    }
+}
+
+extension Graph {
+
+    // MARK: - Initializers
+
+    /// Creates a `Graph` without nodes.
+    init () {
+        nodes = []
+        adjacents = [:]
+    }
+
+    /// Creates a `Graph` with the given `nodes` and `adjacents`, describing how the given `nodes`
+    /// are connected.
+    init (_ nodes: Set<Node>, _ adjacents: [Pair: Weight]) {
+        self.nodes = nodes
+        self.adjacents = adjacents
+    }
+}
+
+extension Graph {
+
+    // MARK: - Computed Properties
+
     var edges: [Edge] {
         return adjacents.map(Edge.init)
     }
-    
+}
+
+extension Graph {
+
     // MARK: - Instance Methods
-    
+
     mutating func insertNode (_ node: Node) {
         nodes.insert(node)
     }
-    
+
     mutating func insertEdge (from source: Node, to destination: Node, withWeight weight: Weight) {
         adjacents[Pair(source, destination)] = weight
     }
-    
+
     mutating func insertEdge (_ keyValue: (Pair, Weight)) {
         insertEdge(from: keyValue.0.a, to: keyValue.0.b, withWeight: keyValue.1)
     }
-    
+
     mutating func insertEdge(_ pair: Pair, _ weight: Weight) {
         insertEdge(from: pair.a, to: pair.b, withWeight: weight)
     }
@@ -65,21 +137,21 @@ struct Graph <Weight: Weightedness, Pair: SymmetricPair & Directedness & Hashabl
         guard let weight = weight(pair) else { return }
         insertEdge(pair, transform(weight))
     }
-    
+
     mutating func insertPath (_ path: Path) {
         path.nodes.forEach { insertNode($0) }
         path.weights.forEach { insertEdge($0) }
     }
-    
+
     mutating func removeEdge (from source: Node, to destination: Node) {
         adjacents[Pair(source, destination)] = nil
     }
-    
+
     /// - Returns: `true` if the graph contains this `node`, else `false`
     func contains (_ node: Node) -> Bool {
         return nodes.contains(node)
     }
-    
+
     /// - Returns: `true` if `edge.nodes` are adjacent in the graph, else `false`
     func contains (_ edge: Pair) -> Bool {
         return adjacents.keys.contains(edge)
@@ -89,7 +161,7 @@ struct Graph <Weight: Weightedness, Pair: SymmetricPair & Directedness & Hashabl
     func weight (from source: Node, to destination: Node) -> Weight? {
         return weight(Pair(source, destination))
     }
-    
+
     /// - Returns: Weight of the edge containing this `pair` of nodes if it exists, else nil
     func weight (_ pair: Pair) -> Weight? {
         return adjacents[pair]
@@ -99,17 +171,17 @@ struct Graph <Weight: Weightedness, Pair: SymmetricPair & Directedness & Hashabl
     func neighbors (of source: Node) -> [Node] {
         return nodes.filter { adjacents.keys.contains(Pair(source, $0)) }
     }
-    
+
     /// - Returns: Array of nodes adjacent to `source` out of the supplied array of `nodes`.
     func neighbors (of source: Node, from nodes: [Node]) -> [Node] {
         return neighbors(of: source, from: Set(nodes))
     }
-    
+
     /// - Returns: Array of nodes adjacent to `source` out of the supplied set of `nodes`.
     func neighbors (of source: Node, from nodes: Set<Node>) -> [Node] {
         return nodes.filter { adjacents.keys.contains(Pair(source, $0)) }
     }
-    
+
     /// - Returns: Array of edges emanating from `source`
     func edges (from source: Node) -> [Edge] {
         return nodes.compactMap {
@@ -119,71 +191,6 @@ struct Graph <Weight: Weightedness, Pair: SymmetricPair & Directedness & Hashabl
     }
 }
 
-extension Graph {
-
-    // MARK: - Initializers
-
-    /// Creates a `Graph` without nodes.
-    init () {
-        nodes = []
-        adjacents = [:]
-    }
-
-    /// Creates a `Graph` with the given `nodes` and `adjacents`, describing how the given `nodes`
-    /// are connected.
-    init (_ nodes: Set<Node>, _ adjacents: [Pair: Weight]) {
-        self.nodes = nodes
-        self.adjacents = adjacents
-    }
-}
-
-extension Graph {
-
-    // MARK: - Type Aliases
-
-    typealias Node = Pair.A
-}
-
-extension Graph {
-
-    // MARK: - Nested Types
-
-    struct Edge {
-
-        // MARK: - Instance Properties
-
-        let nodes: Pair
-        let weight: Weight
-
-        // MARK: - Initializers
-
-        init (_ a: Graph.Node, _ b: Graph.Node, withWeight weight: Weight) {
-            self.nodes = Pair(a, b)
-            self.weight = weight
-        }
-
-        init (_ nodes: Pair, withWeight weight: Weight) {
-            self.nodes = nodes
-            self.weight = weight
-        }
-    }
-
-    struct Path {
-
-        // MARK: - Instance Properties
-
-        let nodes: [Node]
-        let weights: [Pair: Weight]
-
-        // MARK: - Initializers
-
-        init (_ nodes: [Node], _ weights: [Pair: Weight]) {
-            self.nodes = nodes
-            self.weights = weights
-        }
-    }
-}
-
 extension Graph where Weight == WithoutWeights {
     
     // MARK: - Instance Methods
-- 
2.17.2 (Apple Git-113)

