From e04fc463ed81d74a7aa6bbeb9a1d43879016dbbd Mon Sep 17 00:00:00 2001
From: bwetherfield <bwetherfield@gmail.com>
Date: Sat, 27 Oct 2018 14:29:44 -0400
Subject: [PATCH 27/66] Move FP structures into own files (#140) (#142)

---
 .../PitchSpeller/Wetherfield/Getter.swift     | 24 +++++++++++++++++++
 .../PitchSpeller/Wetherfield/PullBack.swift   | 22 +++++++++++++++++
 .../PitchSpeller/Wetherfield/Reducer.swift    | 24 +++++++++++++++++++
 3 files changed, 70 insertions(+)
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/Getter.swift
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
 create mode 100644 Sources/SpelledPitch/PitchSpeller/Wetherfield/Reducer.swift

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Getter.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Getter.swift
new file mode 100644
index 0000000..6b8b358
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Getter.swift
@@ -0,0 +1,24 @@
+//
+//  Getter.swift
+//  SpelledPitch
+//
+//  Created by James Bean on 10/24/18.
+//
+
+struct Getter<A, B> {
+    let view: (A) -> B
+}
+
+extension Getter {
+    init(_ keyPath: KeyPath<A,B>) {
+        self.init { $0[keyPath: keyPath] }
+    }
+}
+
+func compose <A,B,C> (_ lhs: Getter<A,B>, _ rhs: Getter<B,C>) -> Getter<A,C> {
+    return .init { a in rhs.view(lhs.view(a)) }
+}
+
+func * <A,B,C> (lhs: Getter<A,B>, rhs: Getter<B,C>) -> Getter<A,C> {
+    return compose(lhs,rhs)
+}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
new file mode 100644
index 0000000..8742ab6
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/PullBack.swift
@@ -0,0 +1,22 @@
+//
+//  PullBack.swift
+//  SpelledPitch
+//
+//  Created by James Bean on 10/24/18.
+//
+
+import DataStructures
+
+struct PullBack <A,B,C,P,Q> where
+    P: SymmetricPair & Hashable,
+    Q: SymmetricPair & Hashable,
+    P.A == A,
+    Q.B == B
+{
+    let map: (Q) -> C?
+    let lensOnIndex: Getter<A, B>
+
+    func retrieve(for p: P) -> C {
+        return map(Q(lensOnIndex.view(p.a), lensOnIndex.view(p.b)))!
+    }
+}
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Reducer.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Reducer.swift
new file mode 100644
index 0000000..6653b28
--- /dev/null
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Reducer.swift
@@ -0,0 +1,24 @@
+//
+//  Reducer.swift
+//  SpelledPitch
+//
+//  Created by James Bean on 10/24/18.
+//
+
+import Algebra
+
+struct Reducer <S,A>: Monoid {
+
+    static var identity: Reducer {
+        return .init { _, _ in return }
+    }
+
+    static func <> (lhs: Reducer, rhs: Reducer) -> Reducer {
+        return Reducer { s,a in
+            rhs.reduce(&s,a)
+            lhs.reduce(&s,a)
+        }
+    }
+
+    let reduce: (inout S, A) -> ()
+}
-- 
2.17.2 (Apple Git-113)

