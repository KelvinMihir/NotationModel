From 7c979acf6099789e068d2d87efea4df4ba739892 Mon Sep 17 00:00:00 2001
From: James <jbean46@gmail.com>
Date: Sat, 20 Oct 2018 12:40:21 -0400
Subject: [PATCH 21/66] Replace Pitch.Spelling implementation

---
 .../Wetherfield/Pitch.Spelling.Category.swift        | 12 ++++++------
 .../PitchSpeller/Wetherfield/Tendency.swift          |  4 ++--
 .../PitchSpeller/Wetherfield/Wetherfield.swift       | 12 ++++++------
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Pitch.Spelling.Category.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Pitch.Spelling.Category.swift
index 0eb47b2..2df7b20 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Pitch.Spelling.Category.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Pitch.Spelling.Category.swift
@@ -10,9 +10,9 @@ import Pitch
 
 /// Interface for the six pitch spelling categories.
 protocol PitchSpellingCategoryProtocol {
-    typealias ModifierMap = [ModifierDirection: EDO12.Modifier]
+    typealias ModifierMap = [ModifierDirection: Pitch.Spelling.Modifier]
     /// The available `QuarterStepModifier` value by the given `ModifierDirection`.
-    static var modifiers: [ModifierDirection: EDO12.Modifier] { get }
+    static var modifiers: ModifierMap { get }
 }
 
 extension Pitch.Spelling {
@@ -30,14 +30,14 @@ extension Pitch.Spelling {
         /// Category for pitch classes `1` and `6`.
         struct One: PitchSpellingCategoryProtocol {
             static var modifiers: ModifierMap {
-                return [.down: .flat, .neutral: .sharp, .up: .sharps(count: 2)]
+                return [.down: .flat, .neutral: .sharp, .up: .doubleSharp]
             }
         }
 
         /// Category for pitch classes `2`, `7`, and `9`.
         struct Two: PitchSpellingCategoryProtocol {
             static var modifiers: ModifierMap {
-                return [.down: .flat, .neutral: .natural, .up: .sharps(count: 2)]
+                return [.down: .flat, .neutral: .natural, .up: .doubleSharp]
             }
         }
 
@@ -51,7 +51,7 @@ extension Pitch.Spelling {
         /// Category for pitch classes `4`, and `11`.
         struct Four: PitchSpellingCategoryProtocol {
             static var modifiers: ModifierMap {
-                return [.down: .flat, .neutral: .natural, .up: .sharps(count: 2)]
+                return [.down: .flat, .neutral: .natural, .up: .doubleSharp]
             }
         }
 
@@ -78,7 +78,7 @@ extension Pitch.Spelling {
     }
 }
 
-extension Pitch.Spelling where Tuning == EDO12 {
+extension Pitch.Spelling {
 
     /// - Returns: The `Pitch.Spelling` value for the given `pitchClass` with the given
     /// `modifierDirection`, if the `pitchClass` is an integral value, and if the
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
index 8695193..4022646 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Tendency.swift
@@ -32,14 +32,14 @@ struct TendencyPair: Hashable {
     }
 }
 
-extension Pitch.Spelling where Tuning == EDO12 {
+extension Pitch.Spelling {
 
     /// Creates a `Pitch.Spelling` value with the given `pitchClass` and the given `tendencies`,
     /// which are resultant from the Wetherfield-encoded and -decoded `FlowNetwork`, if it is
     /// possible. Otherwise, returns `nil`.
     init?(pitchClass: Pitch.Class, tendencies: TendencyPair) {
         guard
-            let category = Pitch.Spelling<EDO12>.Category.category(for: pitchClass),
+            let category = Pitch.Spelling.Category.category(for: pitchClass),
             let tendencyConverter = category as? TendencyConverting.Type,
             let modifierDirection = tendencyConverter.modifierDirection(for: tendencies)
         else {
diff --git a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
index c61a1d5..1955b49 100644
--- a/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
+++ b/Sources/SpelledPitch/PitchSpeller/Wetherfield/Wetherfield.swift
@@ -49,7 +49,7 @@ struct PitchSpeller {
     // MARK: - Instance Properties
 
     /// The omnipresent, tie-breaking `Pitch.Spelling` value.
-    let parsimonyPivot: Pitch.Spelling<EDO12>
+    let parsimonyPivot: Pitch.Spelling
 
     /// The unspelled `Pitch` values to be spelled.
     let pitches: [Pitch]
@@ -64,7 +64,7 @@ struct PitchSpeller {
     // MARK: - Initializers
 
     /// Create a `PitchSpeller` to spell the given `pitches`, with the given `parsimonyPivot`.
-    init(pitches: [Pitch], parsimonyPivot: Pitch.Spelling<EDO12> = .init(.d)) {
+    init(pitches: [Pitch], parsimonyPivot: Pitch.Spelling = .init(.d)) {
         self.pitches = pitches
         self.parsimonyPivot = parsimonyPivot
         self.pitchNodes = PitchSpeller.internalNodes(pitches: pitches)
@@ -73,7 +73,7 @@ struct PitchSpeller {
 
     /// - Returns: An array of `SpelledPitch` values in the order in which the original
     /// unspelled `Pitch` values are given.
-    func spell() -> [SpelledPitch<EDO12>] {
+    func spell() -> [SpelledPitch] {
 
         var assignedNodes: [AssignedNode] {
             let (sourceSide, sinkSide) = flowNetwork.minimumCut
@@ -89,11 +89,11 @@ struct PitchSpeller {
             .map(spellPitch)
     }
 
-    private func spellPitch(_ up: AssignedNode, _ down: AssignedNode) -> SpelledPitch<EDO12> {
+    private func spellPitch(_ up: AssignedNode, _ down: AssignedNode) -> SpelledPitch {
         let pitch = self.pitch(node: up.index)
         let tendencies = TendencyPair((up.assignment, down.assignment))
-        let spelling = Pitch.Spelling<EDO12>(pitchClass: pitch.class, tendencies: tendencies)!
-        return SpelledPitch(try! pitch.spelled(with: Pitch.Spelling<EDO48>(spelling)))
+        let spelling = Pitch.Spelling(pitchClass: pitch.class, tendencies: tendencies)!
+        return try! pitch.spelled(with: spelling)
     }
 
     /// - Returns: The `Pitch` value for the given `node` value.
-- 
2.17.2 (Apple Git-113)

